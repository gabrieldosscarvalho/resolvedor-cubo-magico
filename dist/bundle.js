(()=>{"use strict";var e,i,t={712:(e,i,t)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Cube=void 0;var n=t(383),o=t(213),r=function(){function e(e){this.faces=[],this.size=e}return e.prototype.initRandom=function(){var e=this.size*this.size,i=new o.FacetColorPicker(e);console.log("---initRandom",{size:this.size,cubeSize:e,colorPicker:i});for(var t=1;t<=6;t++)for(var r=0;r<e;r++)void 0===this.faces[t]&&(this.faces[t]=[]),this.faces[t][r]=new n.Facet(i.popRandomColor())},e.prototype.move=function(e){},e}();i.Cube=r},213:(e,i,t)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.FacetColorPicker=i.FACET_COLORS=void 0;var n,o=t(569);!function(e){e.RED="#F44336",e.GREEN="#4CAF50",e.BLUE="#03A9F4",e.YELLOW="#FFEB3B",e.ORANGE="#FB8C00",e.GREY="#795548"}(n=i.FACET_COLORS||(i.FACET_COLORS={}));var r=Object.keys(n),c=function(){function e(e){this.size=e,this.colors=[];for(var i=0;i<r.length;i++)for(var t=0;t<e;t++)void 0===this.colors[i]&&(this.colors[i]=[]),this.colors[i][t]=n[r[i]]}return e.prototype.popRandomColor=function(){var e=(0,o.randomIntFromInterval)(0,r.length-1),i=(0,o.randomIntFromInterval)(0,this.colors.length-1);if(this.colors[e][i]){var t=this.colors[e][i];return delete this.colors[e][i],t}return this.popRandomColor()},e}();i.FacetColorPicker=c},383:(e,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Facet=void 0;i.Facet=function(e){this.color=e}},890:(e,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Pixel=void 0;i.Pixel=function(e){this.position=e.position,this.color=e.color,this.size=e.size}},569:(e,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.randomIntFromInterval=void 0,i.randomIntFromInterval=function(e,i){return Math.floor(Math.random()*(i-e+1)+e)}},281:function(e,i,t){var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var i,t=1,n=arguments.length;t<n;t++)for(var o in i=arguments[t])Object.prototype.hasOwnProperty.call(i,o)&&(e[o]=i[o]);return e},n.apply(this,arguments)},o=this&&this.__spreadArray||function(e,i,t){if(t||2===arguments.length)for(var n,o=0,r=i.length;o<r;o++)!n&&o in i||(n||(n=Array.prototype.slice.call(i,0,o)),n[o]=i[o]);return e.concat(n||Array.prototype.slice.call(i))};Object.defineProperty(i,"__esModule",{value:!0}),i.Viewport=void 0;var r=t(890),c="#ccc",s=function(){function e(e){var i,t;this.canvasContext=e.canvasContext,this.canvasDOM=e.canvasDOM,this.cubeSize=e.cubeSize,this.width=null!==(i=null==e?void 0:e.width)&&void 0!==i?i:640,this.height=null!==(t=null==e?void 0:e.height)&&void 0!==t?t:480,this.pixels=new Map,this.cubePixels=new Map}return e.prototype.init=function(){this.initStyle(),this.initPixels()},e.prototype.initStyle=function(){this.canvasDOM.setAttribute("width","".concat(this.width,"px")),this.canvasDOM.setAttribute("height","".concat(this.height,"px")),this.canvasDOM.style.backgroundColor="#333"},e.prototype.initPixels=function(){for(var e=this.getPixelSize(),i=Math.ceil(this.height/e),t=Math.ceil(this.width/e),n=0;n<i;n++)for(var o=0;o<t;o++)this.updatePixel(new r.Pixel({position:{x:o,y:n},color:c,size:e}))},e.prototype.getPixelSize=function(){var e=Math.ceil(this.width/this.height),i=this.cubeSize*this.cubeSize*4/e,t=this.cubeSize*this.cubeSize*3/e,n=this.width/i-this.height/t;return Math.floor(n<=-1?this.width/i:this.height/t)},e.prototype.updatePixel=function(e){this.pixels.set("".concat(e.position.x,"-").concat(e.position.y),e),this.renderPixel(e)},e.prototype.renderPixel=function(e){var i=e.size*e.position.x,t=e.size*e.position.y;this.canvasContext.clearRect(i,t,e.size,e.size),this.canvasContext.lineWidth=2,this.canvasContext.strokeStyle=c,this.canvasContext.strokeRect(i,t,e.size,e.size),e.color!==c&&(this.canvasContext.fillStyle=e.color,this.canvasContext.fillRect(i+1,t+1,e.size-2,e.size-2))},e.prototype.renderCube=function(e){var i=this,t=o([],e.faces,!0);this.renderFace({lineInitialValue:this.cubeSize,lineIsValid:function(e){return e<2*i.cubeSize},columnInitialValue:0,columnIsValid:function(e){return e<i.cubeSize}},t[1]),this.renderFace({lineInitialValue:this.cubeSize,lineIsValid:function(e){return e<2*i.cubeSize},columnInitialValue:this.cubeSize,columnIsValid:function(e){return e<2*i.cubeSize}},t[2]),this.renderFace({lineInitialValue:this.cubeSize,lineIsValid:function(e){return e<2*i.cubeSize},columnInitialValue:2*this.cubeSize,columnIsValid:function(e){return e<3*i.cubeSize}},t[3]),this.renderFace({lineInitialValue:this.cubeSize,lineIsValid:function(e){return e<2*i.cubeSize},columnInitialValue:3*this.cubeSize,columnIsValid:function(e){return e<4*i.cubeSize}},t[4]),this.renderFace({lineInitialValue:0,lineIsValid:function(e){return e<i.cubeSize},columnInitialValue:this.cubeSize,columnIsValid:function(e){return e<2*i.cubeSize}},t[5]),this.renderFace({lineInitialValue:2*this.cubeSize,lineIsValid:function(e){return e<3*i.cubeSize},columnInitialValue:this.cubeSize,columnIsValid:function(e){return e<2*i.cubeSize}},t[6])},e.prototype.renderFace=function(e,i){for(var t=e.lineInitialValue,o=e.columnInitialValue,c=0;c<i.length;){for(;e.lineIsValid(t);){for(;e.columnIsValid(o);){var s=this.pixels.get("".concat(o,"-").concat(t));this.updatePixel(new r.Pixel(n(n({},s),{color:i[c].color}))),c++,o++}o=e.columnInitialValue,t++}t=e.lineInitialValue}},e}();i.Viewport=s}},n={};function o(e){var i=n[e];if(void 0!==i)return i.exports;var r=n[e]={exports:{}};return t[e].call(r.exports,r,r.exports,o),r.exports}e=o(712),i=o(281),document.addEventListener("DOMContentLoaded",(function(){var t=document.getElementById("main"),n=t.getContext("2d");if(null===n)throw new Error("Canvas nÃ£o encotrado");var o=new i.Viewport({canvasContext:n,canvasDOM:t,cubeSize:2}),r=new e.Cube(2);r.initRandom(),o.init(),console.log("--cube",{cube:r}),console.log("--viwport",{viwport:o}),o.renderCube(r)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,